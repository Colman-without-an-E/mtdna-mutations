a <- c(
"mu*w1", # w1 degrade
"mu+c*(Nss-w1-delta*m1)", # w1 replicate
"gamma*w1", # w1 diffuse right
"mu*m1", # m1 degrade
"mu+c*(Nss-w1-delta*m1)", # m1 replicate
"gamma*m1", # m1 diffuse right
"mu*w2", # w2 degrade
"mu+c*(Nss-w2-delta*m2)", # w2 replicate
"gamma*w2", # w2 diffuse right
"mu*m2", # m2 degrade
"mu+c*(Nss-w2-delta*m2)", # m2 replicate
"gamma*m2" # m2 diffuse right
)
S2 <- cbind(
c(-1,0,0,0), # w1 degrade
c(1,0,0,0), # w1 replicate
c(-1,0,1,0), # w1 diffuse right
c(0,-1,0,0), # m1 degrade
c(0,1,0,0), # m1 replicate
c(0,-1,0,1), # m1 diffuse right
c(0,0,-1,0), # w2 degrade
c(0,0,1,0), # w2 replicate
c(1,0,-1,0), # w2 diffuse left
c(0,0,0,-1), # m2 degrade
c(0,0,0,1), # m2 replicate
c(0,1,0,-1) # m2 diffuse left
)
gamma <- 1e-2
parms <- c(mu=7e-2, c=2.5e-3, Nss=30, delta=0.2, gamma=gamma)
out <- ssa(x0, a, S2, tf=50, method = ssa.d())
out <- ssa(x0, a, S2, parms, tf=50, method = ssa.d())
out
out$data
set.seed(1)
gamma <- 1e-2
parms <- c(mu=7e-2, c=2.5e-3, Nss=30, delta=0.2, gamma=gamma)
out <- ssa(x0, a, S2, parms, tf=50, method = ssa.d())
out$data
out <- ssa(x0, a, S2, parms, tf=50, method = ssa.d())
out$data
out <- ssa(x0, a, S2, parms, tf=50, method = ssa.d())
out$data
set.seed(1)
out <- ssa(x0, a, S2, parms, tf=50, method = ssa.d())
out$data
out <- ssa(x0, a, S2, parms, tf=50, method = ssa.d())
out$data
out <- ssa(x0, a, S2, parms, tf=50, method = ssa.d())
out$data
set.seed(1)
logspace(1e-2, 1e2, 3)
library(pracma)
logspace(1e-2, 1e2, 3)
logspace(-2, 2, 3)
logseq(-2, 2, 3)
logseq(-2, 2, 100)
logseq(-2, 2, 3)
logspace(-2, 6, 5)
N <- 1000
out$data
library(approxfun)
library(stats)
out$data$w1
out$data.w1
out$data
out$data["w1"]
type(out$data)
typeof(out$data)
class(out$data)
out$data[,"w1"]
out$data[,1:]
out$data[,1]
out$data[,1:-1]
out$data[,1:5]
out$data[,2:5]
out$data[,2:5].sum
sum(out$data[,2:5])
sum(out$data[,2:5], axis = 1)
sum(out$data[,2:5], axis = 0)
rowsum(out$data[,2:5])
rowSums(out$data[,2:5])
data <- out$data
data <- cbind(h=(data[,"w1"]+data[,"w2"])/(rowSums(data[,1:5])))
data
data <- out$data
data <- cbind(data, h=(data[,"w1"]+data[,"w2"])/(rowSums(data[,1:5])))
data
tf
dt <- 0.5
tf <- 50
dt
tf
0:tf:dt
(0:tf:dt)
?seq
seq(0, tf, dt)
approx(data[,"t"], data[,"h"], xout = seq(0,tf,dt), method = "constant")
approx(data[,"t"], data[,"h"], xout = seq(0,tf,dt), method = "constant")$y
data[,"h"]
data[,"t"]
t_interp <- seq(0,tf,dt)
df <- data.frame(t=t_interp)
df
df <- cbind(df, approx(data[,"t"], data[,"h"], xout = t_interp, method = "constant")$y)
df
df <- data.frame(t=t_interp)
df <- data.frame(t=t_interp)
df <- cbind(df, paste("h",i) = approx(data[,"t"], data[,"h"], xout = t_interp, method = "constant")$y)
df <- cbind(df, h = approx(data[,"t"], data[,"h"], xout = t_interp, method = "constant")$y)
df <- cbind(df, h = approx(data[,"t"], data[,"h"], xout = t_interp, method = "constant")$y)
df
suppressWarnings(h <- approx(data[,"t"], data[,"h"], xout = t_interp, method = "constant")$y)
df <- cbind(df, h)
df
dim(df)
dim(df)[1]
dim(df)[2]
H <- c()
H <- cbind(H, h)
H
H <- cbind(H, h)
H
N<-2
H[,1:N]
mean(H[,1:N])
rowMeans(H[,1:N])
dfs <- list()
apply(H[,1:N], 1, sd, na.rm=True)
apply(H[,1:N], 1, sd, na.rm=true)
apply(H[,1:N], 1, sd, na.rm=TRUE)
rowMeans(H[,1:N]),
H
rowMeans(H[,1:N]),
H[,1:2]
N
H[,1:N]
apply(H[,1:N], 1, sd, na.rm=TRUE)
apply(H[,1:N], 1, sd, na.rm=TRUE) / sqrt(N)
rowMeans(H[,1:N])
df <- data.frame(t = t_interp, h_mean, h_sem)
h_mean <- rowMeans(H[,1:N])
h_sem <- apply(H[,1:N], 1, sd, na.rm=TRUE) / sqrt(N)
df <- data.frame(t = t_interp, h_mean, h_sem)
df
dfs
dfs <- append(dfs, df)
dfs
set.seed(1)
gammas <- logspace(-2, 6, 5)
tf <- 50
dt <- 0.5
t_interp <- seq(0,tf,dt)
N <- 1000
dfs <- list()
for (gamma in gammas) {
cat("gamma =", gamma)
parms <- c(mu=7e-2, c=2.5e-3, Nss=30, delta=0.2, gamma=gamma)
H <- c()
for (i in 1:N) {
out <- ssa(x0, a, S2, parms, tf, method = ssa.d())
data <- out$data
data <- cbind(data, h=(data[,"w1"]+data[,"w2"])/(rowSums(data[,1:5])))
suppressWarnings(h <- approx(data[,"t"], data[,"h"], xout = t_interp, method = "constant")$y)
H <- cbind(H, h)
}
h_mean <- rowMeans(H[,1:N])
h_sem <- apply(H[,1:N], 1, sd, na.rm=TRUE) / sqrt(N)
df <- data.frame(t = t_interp, h_mean, h_sem)
dfs <- append(dfs, df)
}
dsf
dfs[1]
dfs[1]
dfs
dfs$h_mean
args <- commandArgs()
args
args <- commandArgs(trailingOnly = TRUE)
argas
args
source("C:/Users/ilove/OneDrive/Documents/Academics/Math/Year 4/Project/mtdna-mutations/src/test.R")
args[0]
args[1]
int(args)
len(args)
length(args)
gamma <- 1
cat("gamma =", gamma)
parms <- c(mu=7e-2, c=2.5e-3, Nss=30, delta=0.2, gamma=gamma)
# H <- c()
out <- ssa(x0, a, S2, parms, tf, method = ssa.d())
data <- out$data
data <- cbind(data, h=(data[,"w1"]+data[,"w2"])/(rowSums(data[,1:5])))
data
data
approx(data, xout = t_interp, method = "constant")$y
# H <- c()
out <- ssa(x0, a, S2, parms, tf, method = ssa.d())
data <- out$data
data <- cbind(data, h=(data[,"w1"]+data[,"w2"])/(rowSums(data[,1:5])))
data
suppressWarnings(h <- approx(data[,"t"], data[,"h"], xout = t_interp, method = "constant")$y)
h
data.frame(t = t_interp, h)
cat(gamma, ".csv", sep = "")
sprint("ssd_h_%e", gamma)
sprintf("ssd_h_%e", gamma)
sprintf("ssd_h_%e2", gamma)
sprintf("ssd_h_%2e", gamma)
sprintf("ssd_h_%.2e", gamma)
sprintf("ssd_h_%.1e", gamma)
sprintf("ssd_h_%.2e2", gamma)
sprintf("ssd_h_%.2e", gamma)
sprintf("ssd_h_%.2E", gamma)
sprintf("ssd_h_%.2e", gamma)
sprintf("ssd_h_%.2e_%d.csv", gamma, seed)
seed = 1
seed <- 1
sprintf("ssd_h_%.2e_%d.csv", gamma, seed)
df <- data.frame(t = t_interp, h)
df
write.csv(df, sprintf("ssd_h_%.2e_%d.csv", gamma, seed))
read.csv("ssd_h_1.00e00_1.csv")
sprintf("ssd_h_%.2e_%d.csv", gamma, seed)
read.csv("ssd_h_1.00e+00_1.csv")
df
write.csv(df, sprintf("ssd_h_%.2e_%d.csv", gamma, seed), row.names = FALSE)
read.csv("ssd_h_1.00e+00_1.csv")
gamma <- 1e2
parms <- c(mu=7e-2, c=2.5e-3, Nss=30, delta=0.2, gamma=gamma)
out <- ssa(x0, a, S2, parms, tf, method = ssa.d())
gammas <- logspace(-4, 6, 5)
out
data <- out$data
gamma <- 1e-2
parms <- c(mu=7e-2, c=2.5e-3, Nss=30, delta=0.2, gamma=gamma)
out <- ssa(x0, a, S2, parms, tf, method = ssa.d(), censusInterval = Inf)
out
out$data
out <- ssa(x0, a, S2, parms, tf, method = ssa.d(), censusInterval = 0.1)
out$data
out <- ssa(x0, a, S2, parms, tf, method = ssa.d(), censusInterval = dt/2)
out$data
out <- ssa(x0, a, S2, parms, tf, method = ssa.d(), censusInterval = dt)
out$data
out <- ssa(x0, a, S2, parms, tf, method = ssa.d(), censusInterval = dt/10)
out$data
data <- out$data
data <- cbind(data, h=(data[,"w1"]+data[,"w2"])/(rowSums(data[,1:5])))
suppressWarnings(h <- approx(data[,"t"], data[,"h"], xout = t_interp, method = "constant")$y)
df <- data.frame(t = t_interp, h)
df
# Set simulation parameters
gammas <- logspace(-4, 6, 5)
gammas
# Set simulation parameters
gammas <- logspace(-4, 6, 4)
gammas
# Set simulation parameters
gammas <- logspace(-4, 6, 6)
gammas
write.csv(df, sprintf("ssd_h_%.2e_%d.csv", gamma, seed), row.names = FALSE)
gammas
gamma
gamma <- 100
parms <- c(mu=7e-2, c=2.5e-3, Nss=30, delta=0.2, gamma=gamma)
out <- ssa(x0, a, S, parms, tf, method = ssa.d(), censusInterval = dt/10)
# Initial state
x0 <- c(w1=25, m1=25, w2=25, m2=25)
# Propensity vector
a <- c(
"mu*w1", # w1 degrade
"mu+c*(Nss-w1-delta*m1)", # w1 replicate
"gamma*w1", # w1 diffuse right
"mu*m1", # m1 degrade
"mu+c*(Nss-w1-delta*m1)", # m1 replicate
"gamma*m1", # m1 diffuse right
"mu*w2", # w2 degrade
"mu+c*(Nss-w2-delta*m2)", # w2 replicate
"gamma*w2", # w2 diffuse right
"mu*m2", # m2 degrade
"mu+c*(Nss-w2-delta*m2)", # m2 replicate
"gamma*m2" # m2 diffuse right
)
# Stoichiometric matrix
S <- cbind(
c(-1,0,0,0), # w1 degrade
c(1,0,0,0), # w1 replicate
c(-1,0,1,0), # w1 diffuse right
c(0,-1,0,0), # m1 degrade
c(0,1,0,0), # m1 replicate
c(0,-1,0,1), # m1 diffuse right
c(0,0,-1,0), # w2 degrade
c(0,0,1,0), # w2 replicate
c(1,0,-1,0), # w2 diffuse left
c(0,0,0,-1), # m2 degrade
c(0,0,0,1), # m2 replicate
c(0,1,0,-1) # m2 diffuse left
)
seed = 1
set.seed(seed)
# Set simulation parameters
gammas <- logspace(-4, 6, 6)
tf <- 50
dt <- 0.5
t_interp <- seq(0,tf,dt)
parms <- c(mu=7e-2, c=2.5e-3, Nss=30, delta=0.2, gamma=gamma)
out <- ssa(x0, a, S, parms, tf, method = ssa.d(), censusInterval = dt/10)
time
time()
?time
system.time()
system.time(out <- ssa(x0, a, S, parms, tf, method = ssa.d(), censusInterval = dt/10))
out
out$data
library(GillespieSSA)
library(pracma)
library(stats)
# Initial state
x0 <- c(w1=25, m1=25, w2=25, m2=25)
# Propensity vector
a <- c(
"mu*w1", # w1 degrade
"mu+c*(Nss-w1-delta*m1)", # w1 replicate
"gamma*w1", # w1 diffuse right
"mu*m1", # m1 degrade
"mu+c*(Nss-w1-delta*m1)", # m1 replicate
"gamma*m1", # m1 diffuse right
"mu*w2", # w2 degrade
"mu+c*(Nss-w2-delta*m2)", # w2 replicate
"gamma*w2", # w2 diffuse right
"mu*m2", # m2 degrade
"mu+c*(Nss-w2-delta*m2)", # m2 replicate
"gamma*m2" # m2 diffuse right
)
# Stoichiometric matrix
S <- cbind(
c(-1,0,0,0), # w1 degrade
c(1,0,0,0), # w1 replicate
c(-1,0,1,0), # w1 diffuse right
c(0,-1,0,0), # m1 degrade
c(0,1,0,0), # m1 replicate
c(0,-1,0,1), # m1 diffuse right
c(0,0,-1,0), # w2 degrade
c(0,0,1,0), # w2 replicate
c(1,0,-1,0), # w2 diffuse left
c(0,0,0,-1), # m2 degrade
c(0,0,0,1), # m2 replicate
c(0,1,0,-1) # m2 diffuse left
)
seed = 1
# Set simulation parameters
gammas <- logspace(-4, 2, 4)
getwd()
setwd("no_sfs")
getwd()
install.packages("GillespieSSA2")
library(GillespieSSA2)
ssa
# Initial state
x0 <- c(w1=25, m1=25, w2=25, m2=25)
# Initial state
x0 <- c(w1=25, m1=25, w2=25, m2=25)
# Propensity vector
a <- c(
"mu*w1", # w1 degrade
"mu+c*(Nss-w1-delta*m1)", # w1 replicate
"gamma*w1", # w1 diffuse right
"mu*m1", # m1 degrade
"mu+c*(Nss-w1-delta*m1)", # m1 replicate
"gamma*m1", # m1 diffuse right
"mu*w2", # w2 degrade
"mu+c*(Nss-w2-delta*m2)", # w2 replicate
"gamma*w2", # w2 diffuse right
"mu*m2", # m2 degrade
"mu+c*(Nss-w2-delta*m2)", # m2 replicate
"gamma*m2" # m2 diffuse right
)
# Reactions
reaction(a, S)
a
# Reactions
r1 <- reaction("mu*w1", c(w1=-1,m1=0,w2=0,m2=0)) # w1 degrade
r2 <- reaction("mu+c*(Nss-w1-delta*m1)", c(w1=1,m1=0,w2=0,m2=0)) # w1 replicate
r3 <- reaction("gamma*w1", c(w1=-1,m1=0,w2=1,m2=0)) # w1 diffuse right
r4 <- reaction("mu*m1", c(w1=0,m1=-1,w2=0,m2=0)) # m1 degrade
r5 <- reaction("mu+c*(Nss-w1-delta*m1)", c(w1=0,m1=1,w2=0,m2=0)) # m1 replicate
r6 <- reaction("gamma*m1", c(w1=0,m1=-1,w2=0,m2=1)) # m1 diffuse right
r7 <- reaction("mu*w2", c(w1=0,m1=0,w2=-1,m2=0)) # w2 degrade
r8 <- reaction("mu+c*(Nss-w2-delta*m2)", c(w1=0,m1=0,w2=1,m2=0)) # w2 replicate
r9 <- reaction("gamma*w2", c(w1=1,m1=0,w2=-1,m2=0)) # w2 diffuse right
r10 <- reaction("mu*m2", c(w1=0,m1=0,w2=0,m2=-1)) # m2 degrade
r11 <- reaction("mu+c*(Nss-w2-delta*m2)", c(w1=0,m1=0,w2=0,m2=1)) # m2 replicate
r12 <- reaction("gamma*m2", c(w1=0,m1=1,w2=0,m2=-1)) # m2 diffuse right
seed <- 1
set.seed(seed)
# Set simulation parameters
gammas <- logspace(-4, 2, 2)
tf <- 50
dt <- 0.5
t_interp <- seq(0,tf,dt)
r <- c(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12)
set.seed(seed)
# Set simulation parameters
gammas <- logspace(-4, 2, 2)
tf <- 50
dt <- 0.5
t_interp <- seq(0,tf,dt)
# Initial state
x0 <- c(w1=25, m1=25, w2=25, m2=25)
gamma <- 1e-2
parms <- c(mu=7e-2, c=2.5e-3, Nss=30, delta=0.2, gamma=gamma)
params <- c(mu=7e-2, c=2.5e-3, Nss=30, delta=0.2, gamma=gamma)
ssa(x0, r, tf, params, census_interval = dt/10)
r
?ssd
?rnorm
# Initial state
x0 <- c(w1=25, m1=25, w2=25, m2=25)
gamma <- 1e-2
params <- c(mu=7e-2, c=2.5e-3, Nss=30, delta=0.2, gamma=gamma)
out <- ssa(x0, r, tf, params, census_interval = dt/10)
r[1]
r[1][["propensity"]]
r[1][["effect"]]
# Reactions
r1 <- reaction("mu*w1", c(w1=-1,m1=0,w2=0,m2=0)) # w1 degrade
r[1]
r[1][["effect"]]
# Reactions
r1 <- reaction("mu*w1", c(w1=-1)) # w1 degrade
r2 <- reaction("mu+c*(Nss-w1-delta*m1)", c(w1=+1)) # w1 replicate
r1[["effect"]]
# Reactions
r1 <- reaction("mu*w1", c(w1=-1)) # w1 degrade
r2 <- reaction("mu+c*(Nss-w1-delta*m1)", c(w1=+1)) # w1 replicate
r3 <- reaction("gamma*w1", c(w1=-1,w2=+1)) # w1 diffuse right
r4 <- reaction("mu*m1", c(m1=-1)) # m1 degrade
r5 <- reaction("mu+c*(Nss-w1-delta*m1)", c(m1=+1)) # m1 replicate
r6 <- reaction("gamma*m1", c(m1=-1,m2=+1)) # m1 diffuse right
r7 <- reaction("mu*w2", c(w2=-1)) # w2 degrade
r8 <- reaction("mu+c*(Nss-w2-delta*m2)", c(w2=+1)) # w2 replicate
r9 <- reaction("gamma*w2", c(w1=+1,w2=-1)) # w2 diffuse right
r10 <- reaction("mu*m2", c(m2=-1)) # m2 degrade
r11 <- reaction("mu+c*(Nss-w2-delta*m2)", c(m2=+1)) # m2 replicate
r12 <- reaction("gamma*m2", c(m1=+1,m2=-1)) # m2 diffuse right
r <- c(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12)
set.seed(seed)
# Set simulation parameters
gammas <- logspace(-4, 2, 2)
tf <- 50
dt <- 0.5
t_interp <- seq(0,tf,dt)
# Initial state
x0 <- c(w1=25, m1=25, w2=25, m2=25)
gamma <- 1e-2
params <- c(mu=7e-2, c=2.5e-3, Nss=30, delta=0.2, gamma=gamma)
out <- ssa(x0, r, tf, params, census_interval = dt/10)
r[1]
r[1][["effect"]]
r1[["effect"]]
r <- list(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12)
r
out <- ssa(x0, r, tf, params, census_interval = dt/10)
out
out$state
out$time
out$state
out <- ssa(x0, r, tf, params, census_interval = dt/10)
out$state
out$time
out$state
out$state[:,"w1"]
out$state[,"w1"]
rowSums(out$state)
out$state <- cbind(out$state, (out$state[,"m1"] + out$state[,"m1"]) / rowSums(out$state))
out$state
out$state <- cbind(out$state, h = (out$state[,"m1"] + out$state[,"m1"]) / rowSums(out$state))
out$state
out$time
suppressWarnings(h <- approx(out$time, out$state[,"h"], xout = t_interp, method = "constant")$y)
h
out <- ssa(x0, r, tf, params, census_interval = dt/10)
out$state <- cbind(out$state, h = (out$state[,"m1"] + out$state[,"m1"]) / rowSums(out$state))
suppressWarnings(h <- approx(out$time, out$state[,"h"], xout = t_interp, method = "constant")$y)
plot(t_interp, h, type = "l")
out <- ssa(x0, r, tf, params, census_interval = dt/10)
out$state <- cbind(out$state, h = (out$state[,"m1"] + out$state[,"m1"]) / rowSums(out$state))
suppressWarnings(h <- approx(out$time, out$state[,"h"], xout = t_interp, method = "constant")$y)
plot(t_interp, h, type = "l")
out <- ssa(x0, r, tf, params, census_interval = dt/10)
out$state <- cbind(out$state, h = (out$state[,"m1"] + out$state[,"m1"]) / rowSums(out$state))
suppressWarnings(h <- approx(out$time, out$state[,"h"], xout = t_interp, method = "constant")$y)
plot(t_interp, h, type = "l")
out$state
out <- ssa(x0, r, tf, params, census_interval = dt/10)
out$state <- cbind(out$state, h = (out$state[,"m1"] + out$state[,"m1"]) / rowSums(out$state))
suppressWarnings(h <- approx(out$time, out$state[,"h"], xout = t_interp, method = "constant")$y)
plot(t_interp, h, type = "l")
out <- ssa(x0, r, tf, params, census_interval = dt/10)
out$state <- cbind(out$state, h = (out$state[,"m1"] + out$state[,"m1"]) / rowSums(out$state))
suppressWarnings(h <- approx(out$time, out$state[,"h"], xout = t_interp, method = "constant")$y)
plot(t_interp, h, type = "l")
out <- ssa(x0, r, tf, params, census_interval = dt/10)
out$state <- cbind(out$state, h = (out$state[,"m1"] + out$state[,"m1"]) / rowSums(out$state))
suppressWarnings(h <- approx(out$time, out$state[,"h"], xout = t_interp, method = "constant")$y)
plot(t_interp, h, type = "l")
out <- ssa(x0, r, tf, params, census_interval = dt/10)
out$state <- cbind(out$state, h = (out$state[,"m1"] + out$state[,"m1"]) / rowSums(out$state))
suppressWarnings(h <- approx(out$time, out$state[,"h"], xout = t_interp, method = "constant")$y)
plot(t_interp, h, type = "l")
